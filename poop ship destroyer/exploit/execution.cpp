#include "execution.h"

#include "datamodel.h"
#include "../output.h"

RBX::Execution::Executor* executor = new RBX::Execution::Executor();
LuaSerializer RBX::Execution::Executor::luaSerializer = LuaSerializer();
lua_State* RBX::Execution::Executor::luaState = lua_open();

std::string RBX::Execution::Executor::doSerialize(uintptr_t L, const std::string& vanilla, const char* chunkName)
{
    RbxOpEncoder encoder;
    int ckey;

    if (RBX::FamilyGuy::luavm_secure_enabled)
    {
        encoder = RBX::Encoding::encode;
        ckey = RBX::getEncode(L);
    }
    else
    {
        encoder = RBX::Encoding::rawdog;
        ckey = 1;
    }

    return luaSerializer.serialize(luaState, vanilla, encoder, ckey);
}

void RBX::Execution::Executor::establishScriptGlobal(uintptr_t thread)
{
    RBX::FamilyGuy::lua::getfield(thread, LUA_GLOBALSINDEX, "Instance"); /* Instance.new('LocalScript') */
    RBX::FamilyGuy::lua::getfield(thread, -1, "new");
    RBX::FamilyGuy::lua::pushstring(thread, "LocalScript");
    RBX::FamilyGuy::lua::pcall(thread, 1, 1, 0);                        /* call 'it': the function */
    RBX::FamilyGuy::lua::setfield(thread, LUA_GLOBALSINDEX, "script");  /* set globally as script */
    RBX::FamilyGuy::lua::settop(thread, -2);                            /* pop instance library from stack */
}

int RBX::Execution::Executor::executeScriptInThread(uintptr_t thread, const std::string& string)
{
    std::string scriptName = random_string(16);

    establishScriptGlobal(thread);

    int deserializeSuccess = RBX::FamilyGuy::feedDeserializer(thread, doSerialize(thread, string, scriptName.c_str()), scriptName.c_str(), 1) == 0;

    if (!deserializeSuccess)
    {
        std::string err = RBX::FamilyGuy::lua::tolstring(thread, -1);
        RBX::FamilyGuy::lua::getfield(thread, LUA_GLOBALSINDEX, "warn");
        RBX::FamilyGuy::lua::pushvalue(thread, -2);
        RBX::FamilyGuy::lua::pcall(thread, 1, 0, 0);
        RBX::FamilyGuy::lua::settop(thread, -2);
        return 1;
    }

    RBX::FamilyGuy::feedSpawn(thread);
    RBX::FamilyGuy::lua::settop(thread, -2);

    return 0;
}

RBX::Execution::Executor* RBX::Execution::get()
{
    return executor;
}