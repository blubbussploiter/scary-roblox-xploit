#include "dynamic_addresses.h"
#include "../output.h"

int RBX::FamilyGuy::lua::pushnil(uintptr_t thread)
{
	uintptr_t addr = get("pushnil");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t)>(addr)(thread);
	}
	return -2;
}

int RBX::FamilyGuy::lua::pushstring(uintptr_t thread, std::string string)
{
	uintptr_t addr = get("pushstring");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, const char*)>(addr)(thread, string.c_str());
	}
	return -2;
}

int RBX::FamilyGuy::lua::pushvalue(uintptr_t thread, int index)
{
	uintptr_t addr = get("pushvalue");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int)>(addr)(thread, index);
	}
	return -2;
}

int RBX::FamilyGuy::lua::insert(uintptr_t thread, int index)
{
	uintptr_t addr = get("insert");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int)>(addr)(thread, index);
	}
	return -2;
}

std::string RBX::FamilyGuy::lua::tolstring(uintptr_t thread, int index)
{
	uintptr_t addr = get("tolstring");
	if (addr)
	{
		return reinterpret_cast<const char*(__cdecl*)(uintptr_t, int, int)>(addr)(thread, index, 0);
	}
	return std::string();
}

void* RBX::FamilyGuy::lua::topointer(uintptr_t thread, int index)
{
	uintptr_t addr = get("topointer");
	if (addr)
	{
		return reinterpret_cast<void*(__cdecl*)(uintptr_t, int)>(addr)(thread, index);
	}
	return 0;
}

int RBX::FamilyGuy::lua::type(uintptr_t thread, int index)
{
	uintptr_t addr = get("type");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int)>(addr)(thread, index);
	}
	return 0;
}

int RBX::FamilyGuy::lua::ttypename(uintptr_t thread, int type)
{
	uintptr_t addr = get("typename");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int)>(addr)(thread, type);
	}
	return 0;
}

int RBX::FamilyGuy::lua::pushcclosure(uintptr_t thread, int closure, int nupval)
{
	uintptr_t addr = get("pushcclosure");
	if (luavm_secure_enabled)
	{
		output::printf("secure enmbld!\n");
		/* pushcclosure cannot be called correctly */
	}
	else
	{
		if (addr)
		{
			return reinterpret_cast<int(__cdecl*)(uintptr_t, int, int)>(addr)(thread, closure, nupval);
		}
	}
	return -2;
}

int RBX::FamilyGuy::lua::pcall(uintptr_t thread, int nargs, int nresults, int nerrfunc)
{
	uintptr_t addr = get("pcall");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int, int, int)>(addr)(thread, nargs, nresults, nerrfunc);
	}
	return -2;
}

int RBX::FamilyGuy::lua::gettop(uintptr_t thread)
{
	uintptr_t addr = get("gettop");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t)>(addr)(thread);
	}
	return -2;
}

int RBX::FamilyGuy::lua::getfield(uintptr_t thread, int index, std::string field)
{
	uintptr_t addr = get("getfield");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int, const char*)>(addr)(thread, index, field.c_str());
	}
	return -2;
}

int RBX::FamilyGuy::lua::setfield(uintptr_t thread, int index, std::string field)
{
	uintptr_t addr = get("setfield");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int, const char*)>(addr)(thread, index, field.c_str());
	}
	return -2;
}

int RBX::FamilyGuy::lua::setmetatable(uintptr_t thread, int index)
{
	uintptr_t addr = get("setmetatable");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int)>(addr)(thread, index);
	}
	return -2;
}

int RBX::FamilyGuy::lua::getmetatable(uintptr_t thread, int index)
{
	uintptr_t addr = get("getmetatable");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int)>(addr)(thread, index);
	}
	return -2;
}

int RBX::FamilyGuy::lua::setreadonly(uintptr_t thread, int index, bool readonly)
{
	uintptr_t addr = get("setreadonly");
	if (addr)
	{
		reinterpret_cast<void(__cdecl*)(uintptr_t, int, bool)>(addr)(thread, index, readonly);
		return 0;
	}
	return -2;
}

int RBX::FamilyGuy::lua::settop(uintptr_t thread, int index)
{
	uintptr_t addr = get("settop");
	if (addr)
	{
		return reinterpret_cast<int(__cdecl*)(uintptr_t, int)>(addr)(thread, index);
	}
	return -2;
}
