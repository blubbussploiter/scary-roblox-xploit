#pragma once

#include <map>
#include <stack>
#include <fstream>
#include <algorithm>

#include "dynamic_addresses.h"

#include "./luaSerializer/serializer.h"
#include "./luaSerializer/encoding.h"

namespace RBX
{

	static std::string random_string(size_t length)
	{
		auto randchar = []() -> char
			{
				const char charset[] =
					"0123456789"
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
					"abcdefghijklmnopqrstuvwxyz";
				const size_t max_index = (sizeof(charset) - 1);
				return charset[rand() % max_index];
			};
		std::string str(length, 0);
		std::generate_n(str.begin(), length, randchar);
		return str;
	}

	namespace Execution
	{
		class Executor
		{
		private:

			static LuaSerializer luaSerializer;
			static lua_State* luaState;

		public:

			std::string generateBytecodeHash(std::string bytecode)
			{
				unsigned int hash = XXH32(&bytecode[0], bytecode.size(), kBytecodeHashSeed);
				return std::to_string(hash);
			}

			static std::string doSerialize(uintptr_t L, const std::string& vanilla, const char* chunkName);
			static void establishScriptGlobal(uintptr_t thread);
			static int executeScriptInThread(uintptr_t thread, const std::string& string);

			Executor()
			{
			}
		};
		
		extern Executor* get();
	}
}